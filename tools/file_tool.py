from langchain.tools import BaseTool
from typing import Optional, Type
from pydantic import BaseModel, Field
import os
import json
from datetime import datetime


class FileInput(BaseModel):
    action: str = Field(description="Action to perform: 'read', 'write', or 'append'")
    filename: str = Field(description="Name of the file to operate on")
    content: Optional[str] = Field(default="", description="Content to write (for write/append actions)")


class FileTool(BaseTool):
    name = "file_processor"
    description = "Read from and write to files for report generation and data storage"
    args_schema: Type[BaseModel] = FileInput

    def _run(
        self,
        action: str,
        filename: str,
        content: str = "",
        run_manager: Optional[any] = None,
    ) -> str:
        try:
            # Ensure we're working in a safe directory
            base_dir = "/Users/xiongbojian/learn/readytensor/week5/multi_agent_demo"
            safe_filename = os.path.join(base_dir, filename.replace('..', '').replace('/', '_'))
            
            if action.lower() == "read":
                if os.path.exists(safe_filename):
                    with open(safe_filename, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                    return f"File content of {filename}:\n{file_content}"
                else:
                    return f"File {filename} not found."
            
            elif action.lower() == "write":
                with open(safe_filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                return f"Successfully wrote content to {filename}"
            
            elif action.lower() == "append":
                with open(safe_filename, 'a', encoding='utf-8') as f:
                    f.write(f"\n{content}")
                return f"Successfully appended content to {filename}"
            
            elif action.lower() == "create_report":
                # Special action for creating structured reports
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                report_content = f"""
# Analysis Report
Generated: {timestamp}

{content}

---
Report generated by Multi-Agent System
"""
                with open(safe_filename, 'w', encoding='utf-8') as f:
                    f.write(report_content)
                return f"Successfully created report: {filename}"
            
            else:
                return f"Unknown action: {action}. Supported actions: read, write, append, create_report"
        
        except Exception as e:
            return f"File operation error: {str(e)}"

    async def _arun(
        self,
        action: str,
        filename: str,
        content: str = "",
        run_manager: Optional[any] = None,
    ) -> str:
        return self._run(action, filename, content, run_manager)